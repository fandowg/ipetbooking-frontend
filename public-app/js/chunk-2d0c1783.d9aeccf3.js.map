{"version":3,"sources":["webpack:///./node_modules/@capacitor-community/http/dist/esm/utils.js","webpack:///./node_modules/@capacitor-community/http/dist/esm/cookie.js","webpack:///./node_modules/@capacitor-community/http/dist/esm/request.js","webpack:///./node_modules/@capacitor-community/http/dist/esm/web.js"],"names":["readBlobAsBase64","async","blob","Promise","resolve","reject","reader","FileReader","onload","base64String","result","base64StringWithoutTags","substr","indexOf","onerror","error","readAsDataURL","encode","str","encodeURIComponent","replace","decodeURIComponent","escape","decode","setCookie","key","value","options","encodedKey","encodedValue","expires","path","document","cookie","getCookies","output","map","cookies","split","k","v","trim","entries","Object","push","getCookie","deleteCookie","clearCookies","Date","toUTCString","normalizeHttpHeaders","headers","originalKeys","keys","loweredKeys","toLocaleLowerCase","normalized","reduce","acc","index","buildUrlParams","params","shouldEncode","accumulator","entry","item","Array","isArray","forEach","slice","buildRequestInit","extra","assign","method","type","data","body","includes","URLSearchParams","set","toString","form","FormData","append","Headers","delete","JSON","stringify","request","requestInit","webFetchExtra","urlParams","shouldEncodeUrlParams","url","response","fetch","contentType","get","responseType","ok","json","text","status","post","put","patch","del","__webpack_require__","d","__webpack_exports__","web_HttpWeb","dist","[object Object]","super","this","getCookiesMap","clearAllCookies","uploadFile","formData","name","fetchOptions","downloadFile","progress","getReader","bytes","chunks","contentLength","parseInt","done","read","length","notifyListeners","allChunks","Uint8Array","position","chunk","Blob","buffer","undefined"],"mappings":"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","file":"js/chunk-2d0c1783.d9aeccf3.js","sourcesContent":["/**\n * Read in a Blob value and return it as a base64 string\n * @param blob The blob value to convert to a base64 string\n */\nexport const readBlobAsBase64 = async (blob) => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n        const base64String = reader.result;\n        const base64StringWithoutTags = base64String.substr(base64String.indexOf(',') + 1); // remove prefix \"data:application/pdf;base64,\"\n        resolve(base64StringWithoutTags);\n    };\n    reader.onerror = (error) => reject(error);\n    reader.readAsDataURL(blob);\n});\n/**\n * Safely web encode a string value (inspired by js-cookie)\n * @param str The string value to encode\n */\nexport const encode = (str) => encodeURIComponent(str)\n    .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)\n    .replace(/[()]/g, escape);\n/**\n * Safely web decode a string value (inspired by js-cookie)\n * @param str The string value to decode\n */\nexport const decode = (str) => str.replace(/(%[\\dA-F]{2})+/gi, decodeURIComponent);\n//# sourceMappingURL=utils.js.map","import { encode, decode } from './utils';\n/**\n * Set a cookie\n * @param key The key to set\n * @param value The value to set\n * @param options Optional additional parameters\n */\nexport const setCookie = (key, value, options = {}) => {\n    // Safely Encoded Key/Value\n    const encodedKey = encode(key);\n    const encodedValue = encode(value);\n    // Clean & sanitize options\n    const expires = `; expires=${(options.expires || '').replace('expires=', '')}`; // Default is \"; expires=\"\n    const path = (options.path || '/').replace('path=', ''); // Default is \"path=/\"\n    document.cookie = `${encodedKey}=${encodedValue || ''}${expires}; path=${path}`;\n};\n/**\n * Gets all HttpCookies\n */\nexport const getCookies = () => {\n    const output = [];\n    const map = {};\n    if (!document.cookie) {\n        return output;\n    }\n    const cookies = document.cookie.split(';') || [];\n    for (const cookie of cookies) {\n        // Replace first \"=\" with CAP_COOKIE to prevent splitting on additional \"=\"\n        let [k, v] = cookie.replace(/=/, 'CAP_COOKIE').split('CAP_COOKIE');\n        k = decode(k).trim();\n        v = decode(v).trim();\n        map[k] = v;\n    }\n    const entries = Object.entries(map);\n    for (const [key, value] of entries) {\n        output.push({\n            key,\n            value,\n        });\n    }\n    return output;\n};\n/**\n * Gets a single HttpCookie given a key\n */\nexport const getCookie = (key) => {\n    const cookies = getCookies();\n    for (const cookie of cookies) {\n        if (cookie.key === key) {\n            return cookie;\n        }\n    }\n    return {\n        key,\n        value: '',\n    };\n};\n/**\n * Deletes a cookie given a key\n * @param key The key of the cookie to delete\n */\nexport const deleteCookie = (key) => {\n    document.cookie = `${key}=; Max-Age=0`;\n};\n/**\n * Clears out cookies by setting them to expire immediately\n */\nexport const clearCookies = () => {\n    const cookies = document.cookie.split(';') || [];\n    for (const cookie of cookies) {\n        document.cookie = cookie\n            .replace(/^ +/, '')\n            .replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);\n    }\n};\n//# sourceMappingURL=cookie.js.map","import { readBlobAsBase64 } from './utils';\n/**\n * Normalize an HttpHeaders map by lowercasing all of the values\n * @param headers The HttpHeaders object to normalize\n */\nconst normalizeHttpHeaders = (headers = {}) => {\n    const originalKeys = Object.keys(headers);\n    const loweredKeys = Object.keys(headers).map(k => k.toLocaleLowerCase());\n    const normalized = loweredKeys.reduce((acc, key, index) => {\n        acc[key] = headers[originalKeys[index]];\n        return acc;\n    }, {});\n    return normalized;\n};\n/**\n * Builds a string of url parameters that\n * @param params A map of url parameters\n * @param shouldEncode true if you should encodeURIComponent() the values (true by default)\n */\nconst buildUrlParams = (params, shouldEncode = true) => {\n    if (!params)\n        return null;\n    const output = Object.entries(params).reduce((accumulator, entry) => {\n        const [key, value] = entry;\n        let encodedValue;\n        let item;\n        if (Array.isArray(value)) {\n            item = '';\n            value.forEach(str => {\n                encodedValue = shouldEncode ? encodeURIComponent(str) : str;\n                item += `${key}=${encodedValue}&`;\n            });\n            // last character will always be \"&\" so slice it off\n            item.slice(0, -1);\n        }\n        else {\n            encodedValue = shouldEncode ? encodeURIComponent(value) : value;\n            item = `${key}=${encodedValue}`;\n        }\n        return `${accumulator}&${item}`;\n    }, '');\n    // Remove initial \"&\" from the reduce\n    return output.substr(1);\n};\n/**\n * Build the RequestInit object based on the options passed into the initial request\n * @param options The Http plugin options\n * @param extra Any extra RequestInit values\n */\nexport const buildRequestInit = (options, extra = {}) => {\n    const output = Object.assign({ method: options.method || 'GET', headers: options.headers }, extra);\n    // Get the content-type\n    const headers = normalizeHttpHeaders(options.headers);\n    const type = headers['content-type'] || '';\n    // If body is already a string, then pass it through as-is.\n    if (typeof options.data === 'string') {\n        output.body = options.data;\n    }\n    // Build request initializers based off of content-type\n    else if (type.includes('application/x-www-form-urlencoded')) {\n        const params = new URLSearchParams();\n        for (const [key, value] of Object.entries(options.data || {})) {\n            params.set(key, value);\n        }\n        output.body = params.toString();\n    }\n    else if (type.includes('multipart/form-data')) {\n        const form = new FormData();\n        if (options.data instanceof FormData) {\n            options.data.forEach((value, key) => {\n                form.append(key, value);\n            });\n        }\n        else {\n            for (let key of Object.keys(options.data)) {\n                form.append(key, options.data[key]);\n            }\n        }\n        output.body = form;\n        const headers = new Headers(output.headers);\n        headers.delete('content-type'); // content-type will be set by `window.fetch` to includy boundary\n        output.headers = headers;\n    }\n    else if (type.includes('application/json') ||\n        typeof options.data === 'object') {\n        output.body = JSON.stringify(options.data);\n    }\n    return output;\n};\n/**\n * Perform an Http request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const request = async (options) => {\n    const requestInit = buildRequestInit(options, options.webFetchExtra);\n    const urlParams = buildUrlParams(options.params, options.shouldEncodeUrlParams);\n    const url = urlParams ? `${options.url}?${urlParams}` : options.url;\n    const response = await fetch(url, requestInit);\n    const contentType = response.headers.get('content-type') || '';\n    // Default to 'text' responseType so no parsing happens\n    let { responseType = 'text' } = response.ok ? options : {};\n    // If the response content-type is json, force the response to be json\n    if (contentType.includes('application/json')) {\n        responseType = 'json';\n    }\n    let data;\n    switch (responseType) {\n        case 'arraybuffer':\n        case 'blob':\n            const blob = await response.blob();\n            data = await readBlobAsBase64(blob);\n            break;\n        case 'json':\n            data = await response.json();\n            break;\n        case 'document':\n        case 'text':\n        default:\n            data = await response.text();\n    }\n    // Convert fetch headers to Capacitor HttpHeaders\n    const headers = {};\n    response.headers.forEach((value, key) => {\n        headers[key] = value;\n    });\n    return {\n        data,\n        headers,\n        status: response.status,\n        url: response.url,\n    };\n};\n/**\n * Perform an Http GET request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const get = async (options) => request(Object.assign(Object.assign({}, options), { method: 'GET' }));\n/**\n * Perform an Http POST request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const post = async (options) => request(Object.assign(Object.assign({}, options), { method: 'POST' }));\n/**\n * Perform an Http PUT request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const put = async (options) => request(Object.assign(Object.assign({}, options), { method: 'PUT' }));\n/**\n * Perform an Http PATCH request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const patch = async (options) => request(Object.assign(Object.assign({}, options), { method: 'PATCH' }));\n/**\n * Perform an Http DELETE request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const del = async (options) => request(Object.assign(Object.assign({}, options), { method: 'DELETE' }));\n//# sourceMappingURL=request.js.map","import { WebPlugin } from '@capacitor/core';\nimport * as Cookie from './cookie';\nimport * as Request from './request';\nexport class HttpWeb extends WebPlugin {\n    constructor() {\n        super();\n        /**\n         * Perform an Http request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.request = async (options) => Request.request(options);\n        /**\n         * Perform an Http GET request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.get = async (options) => Request.get(options);\n        /**\n         * Perform an Http POST request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.post = async (options) => Request.post(options);\n        /**\n         * Perform an Http PUT request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.put = async (options) => Request.put(options);\n        /**\n         * Perform an Http PATCH request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.patch = async (options) => Request.patch(options);\n        /**\n         * Perform an Http DELETE request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.del = async (options) => Request.del(options);\n        /**\n         * Gets all HttpCookies as a Map\n         */\n        this.getCookiesMap = async (\n        // @ts-ignore\n        options) => {\n            const cookies = Cookie.getCookies();\n            const output = {};\n            for (const cookie of cookies) {\n                output[cookie.key] = cookie.value;\n            }\n            return output;\n        };\n        /**\n         * Get all HttpCookies as an object with the values as an HttpCookie[]\n         */\n        this.getCookies = async (options) => {\n            // @ts-ignore\n            const { url } = options;\n            const cookies = Cookie.getCookies();\n            return { cookies };\n        };\n        /**\n         * Set a cookie\n         * @param key The key to set\n         * @param value The value to set\n         * @param options Optional additional parameters\n         */\n        this.setCookie = async (options) => {\n            const { key, value, expires = '', path = '' } = options;\n            Cookie.setCookie(key, value, { expires, path });\n        };\n        /**\n         * Gets all cookie values unless a key is specified, then return only that value\n         * @param key The key of the cookie value to get\n         */\n        this.getCookie = async (options) => Cookie.getCookie(options.key);\n        /**\n         * Deletes a cookie given a key\n         * @param key The key of the cookie to delete\n         */\n        this.deleteCookie = async (options) => Cookie.deleteCookie(options.key);\n        /**\n         * Clears out cookies by setting them to expire immediately\n         */\n        this.clearCookies = async (\n        // @ts-ignore\n        options) => Cookie.clearCookies();\n        /**\n         * Clears out cookies by setting them to expire immediately\n         */\n        this.clearAllCookies = async () => Cookie.clearCookies();\n        /**\n         * Uploads a file through a POST request\n         * @param options TODO\n         */\n        this.uploadFile = async (options) => {\n            const formData = new FormData();\n            formData.append(options.name, options.blob || 'undefined');\n            const fetchOptions = Object.assign(Object.assign({}, options), { body: formData, method: 'POST' });\n            return this.post(fetchOptions);\n        };\n        /**\n         * Downloads a file\n         * @param options TODO\n         */\n        this.downloadFile = async (options) => {\n            const requestInit = Request.buildRequestInit(options, options.webFetchExtra);\n            const response = await fetch(options.url, requestInit);\n            let blob;\n            if (!(options === null || options === void 0 ? void 0 : options.progress))\n                blob = await response.blob();\n            else if (!(response === null || response === void 0 ? void 0 : response.body))\n                blob = new Blob();\n            else {\n                const reader = response.body.getReader();\n                let bytes = 0;\n                let chunks = [];\n                const contentType = response.headers.get('content-type');\n                const contentLength = parseInt(response.headers.get('content-length') || '0', 10);\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done)\n                        break;\n                    chunks.push(value);\n                    bytes += (value === null || value === void 0 ? void 0 : value.length) || 0;\n                    const status = {\n                        type: 'DOWNLOAD',\n                        url: options.url,\n                        bytes,\n                        contentLength,\n                    };\n                    this.notifyListeners('progress', status);\n                }\n                let allChunks = new Uint8Array(bytes);\n                let position = 0;\n                for (const chunk of chunks) {\n                    if (typeof chunk === 'undefined')\n                        continue;\n                    allChunks.set(chunk, position);\n                    position += chunk.length;\n                }\n                blob = new Blob([allChunks.buffer], { type: contentType || undefined });\n            }\n            return {\n                blob,\n            };\n        };\n    }\n}\n//# sourceMappingURL=web.js.map"],"sourceRoot":""}